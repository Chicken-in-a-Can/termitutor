#!/bin/python

# Begin Imports
import os
import colorama
from colorama import Fore

# Begin method adding
# Add file path for file interactions
def addpath(com, num):
    ret = ""
    comlist = com.split(" ")
    comlist[num] = path + comlist[num]
    for ele in comlist:
        ret += ele + " "
    return ret

# Decide how to add file path for interactions
def fpath(supp, act):
    match supp:
        case "ls":
            act = "ls " + path
            return act
        case "cat":
            act = addpath(act, 1)
            return act
        case "echo":
            return act
        case "touch":
            act = addpath(act, 1)
            return act
        case "nano":
            act = addpath(act, 1)
            return act
        case _:
            return "Not valid"

# Check to make sure user is running correct commands
def check(supp, act):
    # TODO: Look into this further, as there may be more issues in the future
    # Potential solution: add a length variables to check()
    # ex: check(supp, act, suppLen)

    # kinda of a bandaid fix, but it solves the issue of running "cat" without additional parameters causing an out of bounds error
    if supp == "cat" and len(act.split(" ")) != 2:
        return False

    act += " "
    actlist = act.split(" ")
    if supp == actlist[0]:
        return True
    else:
        return False

# Have user input data, run preliminary checks
def inp(supp):
    print("")
    run = input(Fore.GREEN + setup[0] + Fore.WHITE)
    if len(run) >= 4:
        if run[0:4] == "sudo":
            print("The sudo command allows the user to act as root, allowing for them to make system-wide changes\nThis can be useful, but must be used carefully\n")
    if check(supp, run):
        run = fpath(supp, run)
        os.system(run)
    else:
        print("Please type in \"" + supp + "\" instead of \"" + run + "\"")
        inp(supp)
    return True

#Initialization and variable creation
os.system("./setup")
user = os.getlogin()
path = "/home/" + user + "/.termitutor/"

# setup is an array which stores the prompt that will be given
# to the user and the folder in which the program is being run from
setup = []
with open("/home/" + user + "/.termitutor/.set", "r") as s:
	setup = s.readlines()
	s.close()
setup = [sets[:-1] for sets in setup]

os.system("clear")
print(setup)

# Begin actual user prompts
print("Welcome to TermiTutor!\nPlease type in \"ls\" to begin")
inp("ls")
print("\nCongratulations! You entered you first Linux terminal command\nThe \"ls\" command lists out the contents of a directory, which is essentially a folder")
print("Now run \"cat\" and one of the file names shown with \"ls\"\nex. \"cat example.txt\"")
inp("cat")
print("\nCat prints out the contents of a file. You can use this on almost every file on your machine")
print("Now type \"echo\" and then whatever piece of text you want, put in quotes")
inp("echo")
print("The echo command prints out whatever string you enter")
print("Now type \"touch\" and then a file name you want to create")
inp("touch")
print("The \"touch\" command creates a file. We'll now edit this file")
print("Type \"nano\" and then the name of the file you created")
inp("nano")

#Cleaning up
os.system("rm -rf /home/" + user + "/.termitutor")
